{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anoma\\\\OneDrive\\\\desktop\\\\GeekidsPlus\\\\frontend\\\\src\\\\Game.js\";\nimport React from 'react';\nimport { shuffle } from './utils.js';\nimport Gameboard from './components/game.components/Gameboard';\nimport axios from 'axios';\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.roundStart = () => {\n      this.setDropzoneData();\n      this.setAlphabetData();\n      this.setCurrentImgData();\n    };\n\n    this.roundComplete = () => {\n      this.currentWordsIndexCounter = this.currentWordsIndexCounter + 1;\n    };\n\n    this.init = () => {\n      this.lettersCorrectCounter = 0;\n      this.roundStart();\n      this.inSession = !this.inSession;\n    };\n\n    this.handleInit = () => {\n      this.init();\n    };\n\n    this.handleOnNextRound = () => {\n      this.roundStart();\n      this.setState(state => ({\n        displayNextRoundButton: !this.state.displayNextRoundButton\n      }));\n    };\n\n    this.handleOnFinalCheckCorrect = () => {\n      this.roundComplete();\n      this.setState(state => ({\n        displayNextRoundButton: !this.state.displayNextRoundButton\n      }));\n    };\n\n    this.handleOnHelperClick = () => {\n      this.setAlphabetData();\n    };\n\n    this.state = {\n      alphabet: 0,\n      dropzoneWord: '',\n      currentImg: '',\n      displayNextRoundButton: false,\n      displayDifficultWords: false\n    };\n    this.inSession = false;\n    this.currentWordsIndexCounter = 0;\n    this.handleInit = this.handleInit.bind(this);\n    this.handleOnNextRound = this.handleOnNextRound.bind(this);\n    this.handleOnFinalCheckCorrect = this.handleOnFinalCheckCorrect.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.setOverlayBandler();\n  }\n\n  loadWords() {\n    axios.get('http://localhost:3000/cards').then(response => this.currentWords = response.data).then(() => {\n      this.currentWord = this.currentWords[this.currentWordsIndexCounter].name;\n      this.difficultLetters = [...this.currentWords[this.currentWordsIndexCounter].name];\n    });\n  }\n\n  setAlphabetData() {\n    this.setState({\n      alphabet: shuffle([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n    });\n  }\n\n  setDropzoneData() {\n    this.setState({\n      dropzoneWord: [...this.currentWords[this.currentWordsIndexCounter].name]\n    });\n  }\n\n  setCurrentImgData() {\n    this.setState({\n      currentImg: this.currentWords[this.currentWordsIndexCounter].img\n    });\n  } //-- Game Controller Logic --\\\\\n\n\n  render() {\n    if (this.inSession) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui center aligned grey container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Gameboard, {\n        inSession: this.inSession,\n        dropzoneWord: this.state.dropzoneWord,\n        displayNextRoundButton: this.state.displayNextRoundButton,\n        difficultLetters: this.difficultLetters,\n        handleInit: this.handleInit,\n        handleOnFinalCheckCorrect: this.handleOnFinalCheckCorrect,\n        handleOnNextRound: this.handleOnNextRound,\n        alphabet: this.state.alphabet,\n        handleOnHelperClick: this.handleOnHelperClick,\n        currentImg: this.state.currentImg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui center aligned grey container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, this.loadWords(), /*#__PURE__*/React.createElement(Gameboard, {\n      inSession: this.inSession,\n      handleInit: this.handleInit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), \"Click the start Button to start.\"));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/anoma/OneDrive/desktop/GeekidsPlus/frontend/src/Game.js"],"names":["React","shuffle","Gameboard","axios","Game","Component","constructor","props","roundStart","setDropzoneData","setAlphabetData","setCurrentImgData","roundComplete","currentWordsIndexCounter","init","lettersCorrectCounter","inSession","handleInit","handleOnNextRound","setState","state","displayNextRoundButton","handleOnFinalCheckCorrect","handleOnHelperClick","alphabet","dropzoneWord","currentImg","displayDifficultWords","bind","componentDidMount","setOverlayBandler","loadWords","get","then","response","currentWords","data","currentWord","name","difficultLetters","img","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { shuffle } from './utils.js'\r\nimport Gameboard from './components/game.components/Gameboard'\r\nimport axios from 'axios';\r\nexport default class Game extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {alphabet: 0, dropzoneWord: '', currentImg: '', displayNextRoundButton: false, displayDifficultWords: false}\r\n        this.inSession = false;\r\n        this.currentWordsIndexCounter = 0;\r\n        this.handleInit = this.handleInit.bind(this)\r\n        this.handleOnNextRound = this.handleOnNextRound.bind(this);\r\n        this.handleOnFinalCheckCorrect = this.handleOnFinalCheckCorrect.bind(this);\r\n    }\r\n    componentDidMount () {\r\n        this.props.setOverlayBandler();\r\n    }\r\n    loadWords (){\r\n        axios.get('http://localhost:3000/cards')\r\n        .then(response=>this.currentWords = response.data)\r\n        .then(()=>{\r\n            this.currentWord = this.currentWords[this.currentWordsIndexCounter].name;\r\n            this.difficultLetters = [...this.currentWords[this.currentWordsIndexCounter].name];\r\n        })\r\n    }\r\n\r\n    setAlphabetData () {\r\n        this.setState({alphabet: \r\n            shuffle([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])})\r\n    }\r\n\r\n    setDropzoneData (){\r\n        this.setState({dropzoneWord: [...this.currentWords[this.currentWordsIndexCounter].name]})\r\n    }\r\n\r\n    setCurrentImgData (){\r\n        this.setState({currentImg: this.currentWords[this.currentWordsIndexCounter].img})\r\n    }\r\n   \r\n    //-- Game Controller Logic --\\\\\r\n\r\n    roundStart = () => {\r\n       this.setDropzoneData();\r\n       this.setAlphabetData();\r\n       this.setCurrentImgData();\r\n    }\r\n\r\n    roundComplete = () => {\r\n        this.currentWordsIndexCounter  = this.currentWordsIndexCounter  + 1\r\n    }\r\n\r\n    init = () => {\r\n        this.lettersCorrectCounter = 0;\r\n        this.roundStart();\r\n        this.inSession = !this.inSession;\r\n    }\r\n    \r\n    //-- React Handlers --\\\\\r\n    handleInit = () => {\r\n        this.init()\r\n    }\r\n\r\n    handleOnNextRound = () => {\r\n        this.roundStart()\r\n        this.setState((state)=>({displayNextRoundButton: !this.state.displayNextRoundButton}))\r\n    }\r\n\r\n    handleOnFinalCheckCorrect = () => {\r\n        this.roundComplete ()\r\n        this.setState((state)=>({displayNextRoundButton: !this.state.displayNextRoundButton}))\r\n    }\r\n\r\n    handleOnHelperClick = () => {\r\n        this.setAlphabetData()\r\n    }\r\n\r\n    render(){\r\n        if(this.inSession){\r\n            return (\r\n                <div className=\"ui center aligned grey container\">\r\n                    <Gameboard \r\n                        inSession={this.inSession} \r\n                        dropzoneWord={this.state.dropzoneWord} \r\n                        displayNextRoundButton={this.state.displayNextRoundButton} \r\n                        difficultLetters={this.difficultLetters} \r\n                        handleInit={this.handleInit} \r\n                        handleOnFinalCheckCorrect={this.handleOnFinalCheckCorrect}\r\n                        handleOnNextRound={this.handleOnNextRound} \r\n                        alphabet={this.state.alphabet}\r\n                        handleOnHelperClick={this.handleOnHelperClick}\r\n                        currentImg={this.state.currentImg}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n        <div>\r\n            <div className=\"ui center aligned grey container\">\r\n                        {this.loadWords()}\r\n                <Gameboard inSession={this.inSession} handleInit={this.handleInit} />\r\n              Click the start Button to start. \r\n           </div>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}